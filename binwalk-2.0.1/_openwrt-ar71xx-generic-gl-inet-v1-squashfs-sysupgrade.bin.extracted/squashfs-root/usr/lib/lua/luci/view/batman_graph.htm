<%#
LuCI - Lua Configuration Interface
Copyright 2012 Jo-Philipp Wich <xm@subsignal.org>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

$Id$

-%>

<% luci.http.prepare_content("text/html") %>

<%+header%>

<script type="text/javascript" src="<%=resource%>/dracula/raphael-min.js"></script>
<script type="text/javascript" src="<%=resource%>/dracula/dracula_graffle.js"></script>
<script type="text/javascript" src="<%=resource%>/dracula/dracula_graph.js"></script>
<script type="text/javascript" src="<%=resource%>/jquery/jquery-1.4.js"></script>

<script type="text/javascript">//<![CDATA[
	XHR.get('<%=luci.dispatcher.build_url("batman/topo/json")%>', null,
		function(x, data)
		{
			var g = new Graph();


			var render = function(r, node) {
				var color = Raphael.getColor();
				var rect = r.rect(node.point[0]-50, node.point[1]-10, 100, 20)
					   .attr({"fill": color, "stroke": color, "stroke-width": 2, r : "9px"})
				var set = r.set().
					push(rect).
					push(r.text(node.point[0], node.point[1], node.label || node.id)
						.attr({"fill": "#000"}));
				return set;
			    };

			for (var i = 0; i < (data.length-1); i++)
			{
				// node->node
				if (data[i].router && data[i].neighbor) {
					g.addNode(data[i].router, { render: render });
					g.addNode(data[i].neighbor, { render: render });
					g.addEdge(data[i].router, data[i].neighbor,
						{ label: parseFloat(data[i].label).toFixed(1),
						 directed: true, stroke: '#aaaaaa' });
					}
//				// node->leaf // Creates too much clutter
//				else if (data[i].router && data[i].gateway) {
//					g.addNode(data[i].router, { render: render });
//					g.addNode(data[i].gateway, { render: render });
//					g.addEdge(data[i].router, data[i].gateway,
//						{ label: 'leaf', stroke: '#cccccc' });
//					}
				// node secondary
				else if (data[i].secondary) {
					g.addNode(data[i].secondary, { render: render });
					g.addNode(data[i].of, { render: render });
					g.addEdge(data[i].secondary, data[i].of,
						{ fill: "#000" } );
					}
			}

			var canvas = document.getElementById('canvas');

			var layouter = new Graph.Layout.Spring(g);
			layouter.layout();

			var renderer = new Graph.Renderer.Raphael(canvas.id, g, canvas.offsetWidth, canvas.offsetHeight);
			renderer.draw();
		}
	);
//]]></script>

<div id="canvas" style="min-width:800px; min-height:800px"></div>

<%+footer%>
